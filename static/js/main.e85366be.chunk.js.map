{"version":3,"sources":["components/nav/NavBar.js","components/Login.js","components/Logout.js","modules/PhotoManager.js","modules/QuoteManager.js","modules/IdeaManager.js","modules/ActivityManager.js","components/myfavorites/MyFavorites.js","modules/EventbriteManager.js","modules/keys.js","components/changephotos/MyPhotos.js","components/changequotes/MyQuotes.js","components/changequotes/QuoteEditForm.js","components/changeideas/MyIdeas.js","components/changeideas/IdeaEditForm.js","components/changeactivities/MyActivities.js","components/changeactivities/ActivityEditForm.js","components/changeactivities/Eventbriteitems.js","components/ApplicationViews.js","components/MotivationJoy.js","index.js"],"names":["Example","state","isOpen","this","setState","react_default","a","createElement","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","toggle","Collapse","navbar","Nav","className","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","react_router_dom","to","divider","React","Component","Login","username","password","handleFieldChangeUsername","event","_this","target","value","handleFieldChangePassword","getUser","fetch","concat","then","data","json","findCurrentUser","preventDefault","console","log","window","alert","sessionStorage","setItem","id","props","setAuthState","history","push","addThisUser","user","postUser","postedUser","newUser","method","headers","Content-Type","body","JSON","stringify","type","onChange","withRouter","Logout","radioSelected","clear","_this2","ButtonGroup","Button","onRadioBtnClick","active","remoteURL","PhotoManager","get","e","getAll","getSpecificInfo","incomingstring","post","newPhoto","put","putPhoto","delete","deletePhoto","QuoteManager","newQuote","editedQuote","deleteQuote","IdeaManager","newIdea","putIdea","deleteIdea","ActivityManager","newActivity","putActivity","deleteActivity","MyFavorites","currentUserId","parseInt","getItem","onClickPhotoHandler","photoComingIn","copyPhoto","Object","objectSpread","isfavorite","getMyFavoritePhotos","onClickQuoteHandler","quoteComingIn","copyQuote","getMyFavoriteQuotes","onClickIdeaHandler","ideaComingIn","copyIdea","getMyFavoriteIdeas","onClickActivityHandler","activityComingIn","copyActivity","getMyFavoriteActivities","photos","map","eachphoto","key","src","url","alt","quotes","eachquote","quote","author","ideas","eachidea","idea","activities","eachactivity","activity_nickname","EventbriteManager","getEventsByTime","timeperiod","MyPhotos","handleOnChangePhotoUrl","handleOnClickAddPhotoButton","userid","getMyPhotos","changeMyFavorite","selectedphoto","htmlFor","rows","placeholder","disabled","checked","MyQuotes","handleOnChangeQuote","handleOnChangeAuthor","handleOnClickAddQuoteButton","getMyQuotes","QuoteEditForm","updateExistingQuote","evt","match","params","quoteId","updateQuote","quoteToEdit","_this3","Fragment","MyIdeas","handleOnChangeIdea","handleOnClickAddIdeaButton","getMyIdeas","IdeaEditForm","updateExistingIdea","editedIdea","ideaId","updateIdea","ideaToEdit","MyActivities","handleOnChangeActivityUrl","handleOnChangeActivityNickname","handleOnClickAddActivityButton","activity_url","getMyActivities","eventurl","onClickResetEventUrl","ActivityEditForm","updateExistingActivity","editedActivity","activityId","updateActivity","activityToEdit","Eventbriteitems","getEventbriteevents","events","eachevent","name","text","onClickEventChosen","ApplicationViews","allPhotos","allQuotes","allIdeas","allActivities","photoToDelete","editedQuoteObject","allquotes","quoteToDelete","editedIdeaObject","allideas","ideaToDelete","editedActivityObject","allactivities","activityToDelete","allEventsNashville","theurlcomingin","react_router","exact","path","render","src_components_Login","src_components_Logout","assign","MyFavorites_MyFavorites","MyPhotos_MyPhotos","MyQuotes_MyQuotes","QuoteEditForm_QuoteEditForm","MyIdeas_MyIdeas","IdeaEditForm_IdeaEditForm","MyActivities_MyActivities","ActivityEditForm_ActivityEditForm","Eventbriteitems_Eventbriteitems","MotivationJoy","authenticated","NavBar_Example","components_ApplicationViews","isAuthenticated","ReactDOM","MotivationJoy_MotivationJoy","document","querySelector"],"mappings":"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","file":"static/js/main.e85366be.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  // NavItem,\r\n  // NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem\r\n} from \"reactstrap\"\r\n\r\nexport default class Example extends React.Component {\r\n  state = {\r\n    isOpen: false\r\n  }\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar color=\"light\" light expand=\"md\">\r\n          <NavbarBrand href=\"/\">Motivation Joy</NavbarBrand>\r\n          <NavbarToggler onClick={this.toggle} />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              <UncontrolledDropdown nav inNavbar>\r\n                <DropdownToggle nav caret>\r\n                  What would you like to do?\r\n                </DropdownToggle>\r\n                <DropdownMenu right>\r\n                  <DropdownItem>\r\n                    <Link to=\"/My_Favorites\">My Favorites</Link>\r\n                  </DropdownItem>\r\n                  <DropdownItem divider />\r\n                  <DropdownItem>\r\n                    <Link to=\"/My_Photos\">My Photos</Link>\r\n                  </DropdownItem>\r\n                  <DropdownItem>\r\n                    <Link to=\"/My_Quotes\">My Quotes</Link>\r\n                  </DropdownItem>\r\n                  <DropdownItem>\r\n                    <Link to=\"/My_Ideas\">My Ideas</Link>\r\n                  </DropdownItem>\r\n                  <DropdownItem>\r\n                    <Link to=\"/My_Activities\">My Activities</Link>\r\n                  </DropdownItem>\r\n                  <DropdownItem divider />\r\n                  <DropdownItem>\r\n                    <Link to=\"/logout\">Logout</Link>\r\n                  </DropdownItem>\r\n                </DropdownMenu>\r\n              </UncontrolledDropdown>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\"\r\nimport { withRouter } from \"react-router\"\r\nimport \"./Login.css\"\r\n\r\nclass Login extends Component {\r\n  state = {\r\n    username: \"\",\r\n    password: \"\"\r\n  }\r\n\r\n  //Change the state above based on User Input-->Username\r\n  handleFieldChangeUsername = event => {\r\n    this.setState({ username: event.target.value })\r\n  }\r\n\r\n  //Change the state above based on User Input-->Password\r\n  handleFieldChangePassword = event => {\r\n    this.setState({ password: event.target.value })\r\n  }\r\n\r\n  //Fetch the value from the users resource for the username put into the input field (if the data exists, of course!)\r\n  getUser = () => {\r\n    return fetch(`http://localhost:1717/users?q=${this.state.username}`).then(\r\n      data => data.json()\r\n    )\r\n  }\r\n\r\n  postUser(newUser) {\r\n    return fetch(`http://localhost:1717/users`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(newUser)\r\n    }).then(data => data.json())\r\n  }\r\n\r\n  //For logging in a user\r\n  findCurrentUser = event => {\r\n    event.preventDefault()\r\n    console.log(\"click works\")\r\n    if (this.state.username === \"\" || this.state.password === \"\") {\r\n      window.alert(\"Please fill in all fields\")\r\n    } else {\r\n      //The getUser function shown above fetches the data of the first item matching the user input field.\r\n      this.getUser().then(data => {\r\n        //If there is a value returned, i.e., that it is NOT undefined, then...\r\n        if (data[0]) {\r\n          //If the what is in the input fields match what is existing in the users resource, then:\r\n          //1.  Set Session Storage\r\n          //2.  Call the setAuthState function in Motivation Joy to set set the value of authenticated\r\n          //3.  Set the page to where it should go next--i.e., the main landing page!\r\n          if (\r\n            this.state.username === data[0].username &&\r\n            this.state.password === data[0].password\r\n          ) {\r\n            sessionStorage.setItem(\"id\", data[0].id)\r\n            this.props.setAuthState()\r\n            this.props.history.push(\"/My_Photos\")\r\n          }\r\n        } else {\r\n          window.alert(\"Please use a valid login or register\")\r\n        }\r\n      })\r\n      // })\r\n    }\r\n  }\r\n\r\n  //For registering a user\r\n  addThisUser = event => {\r\n    event.preventDefault()\r\n    if (this.state.username === \"\" || this.state.password === \"\") {\r\n      window.alert(\"Please fill in all fields\")\r\n    } else {\r\n      const user = {\r\n        username: this.state.username,\r\n        password: this.state.password\r\n      }\r\n      this.getUser().then(data => {\r\n        //Checking for the presence of a value in the data[0] location, i.e., that it is not undefined\r\n        if (data[0]) {\r\n          if (\r\n            //If the user and password exists in the database already...\r\n            this.state.username === data[0].username &&\r\n            this.state.password === data[0].password\r\n          ) {\r\n            window.alert(\"You already exist in our system!\")\r\n            sessionStorage.setItem(\"id\", data[0].id)\r\n            this.props.setAuthState()\r\n            this.props.history.push(\"/My_Photos\")\r\n          } else if (\r\n            //If the user exists in the database but the password is incorrect...\r\n            this.state.username === data[0].username &&\r\n            this.state.password !== data[0].password\r\n          ) {\r\n            window.alert(\r\n              \"You already exist in our system. Please enter the correct password and press Login.\"\r\n            )\r\n          }\r\n        } else {\r\n          //Register the user...\r\n          this.postUser(user).then(postedUser => {\r\n            sessionStorage.setItem(\"id\", postedUser.id)\r\n            this.props.setAuthState()\r\n            this.props.history.push(\"/My_Photos\")\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"loginform\">\r\n        <h2>Welcome to Motivation Joy</h2>\r\n        <div className=\"usernameinfo\">\r\n          <label>Username:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"username\"\r\n            onChange={this.handleFieldChangeUsername}\r\n          />\r\n        </div>\r\n        <div className=\"passwordinfo\">\r\n          <label>Password:</label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"password\"\r\n            onChange={this.handleFieldChangePassword}\r\n          />\r\n        </div>\r\n        <button onClick={this.findCurrentUser} className=\"btn btn-primary mb-5\">\r\n          Login\r\n        </button>\r\n        <div className=\"registerinfo\">\r\n          <label className=\"registermessage mr-3\">\r\n            Not a user yet? Enter username and password fields above and then\r\n          </label>\r\n          <a href=\"#\" className=\"btn btn-secondary\" onClick={this.addThisUser}>\r\n            Click Here to Register\r\n          </a>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default withRouter(Login)\r\n","import React, { Component } from \"react\"\r\nimport { Button, ButtonGroup } from \"reactstrap\"\r\nimport \"./Logout.css\"\r\nimport { withRouter } from \"react-router\"\r\n\r\nclass Logout extends Component {\r\n  state = {\r\n    radioSelected: false\r\n  }\r\n\r\n  onRadioBtnClick(radioSelected) {\r\n    if (radioSelected === true) {\r\n      //Logout has been confirmed (radioSelected set to true).  1.  Clear session storage.  2. Set the Authstate in Motivation Joy component to prevent access to the existing components.  3.  Send the individual to the Login page.\r\n      sessionStorage.clear()\r\n      this.props.setAuthState()\r\n      this.props.history.push(\"/login\")\r\n    } else {\r\n      //Send the person back to the main landing page.\r\n      this.props.history.push(\"/My_Favorites\")\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"logoutform\">\r\n          <h5>Are you sure you want to logout?</h5>\r\n          <ButtonGroup className=\"mb-3\">\r\n            <Button\r\n              color=\"success\"\r\n              onClick={() => this.onRadioBtnClick(true)}\r\n              active={this.state.radioSelected === true}\r\n            >\r\n              Yes\r\n            </Button>\r\n            <Button\r\n              color=\"danger\"\r\n              onClick={() => this.onRadioBtnClick(false)}\r\n              active={this.state.radioSelected === false}\r\n            >\r\n              No\r\n            </Button>\r\n          </ButtonGroup>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default withRouter(Logout)\r\n","const remoteURL = \"http://localhost:1717\"\r\n\r\nexport default {\r\n  get(id) {\r\n    return fetch(`${remoteURL}/photos/${id}`).then(e => e.json())\r\n  },\r\n  getAll() {\r\n    return fetch(`${remoteURL}/photos`).then(e => e.json())\r\n  },\r\n  getSpecificInfo(incomingstring) {\r\n    return fetch(`${remoteURL}/${incomingstring}`).then(e => e.json())\r\n  },\r\n  post(newPhoto) {\r\n    return fetch(`${remoteURL}/photos`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(newPhoto)\r\n    }).then(data => data.json())\r\n  },\r\n  put(putPhoto) {\r\n    return fetch(`${remoteURL}/photos/${putPhoto.id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(putPhoto)\r\n    }).then(data => data.json())\r\n  },\r\n  delete(deletePhoto) {\r\n    return fetch(`${remoteURL}/photos/${deletePhoto.id}`, {\r\n      method: \"DELETE\"\r\n    }).then(e => e.json())\r\n  }\r\n}\r\n","const remoteURL = \"http://localhost:1717\"\r\n\r\nexport default {\r\n  get(id) {\r\n    return fetch(`${remoteURL}/quotes/${id}`).then(e => e.json())\r\n  },\r\n  getAll() {\r\n    return fetch(`${remoteURL}/quotes`).then(e => e.json())\r\n  },\r\n  getSpecificInfo(incomingstring) {\r\n    return fetch(`${remoteURL}/${incomingstring}`).then(e => e.json())\r\n  },\r\n  post(newQuote) {\r\n    return fetch(`${remoteURL}/quotes`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(newQuote)\r\n    }).then(data => data.json())\r\n  },\r\n  put(editedQuote) {\r\n    return fetch(`${remoteURL}/quotes/${editedQuote.id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(editedQuote)\r\n    }).then(data => data.json())\r\n  },\r\n  delete(deleteQuote) {\r\n    return fetch(`${remoteURL}/quotes/${deleteQuote.id}`, {\r\n      method: \"DELETE\"\r\n    }).then(e => e.json())\r\n  }\r\n}\r\n","const remoteURL = \"http://localhost:1717\"\r\n\r\nexport default {\r\n  get(id) {\r\n    return fetch(`${remoteURL}/ideas/${id}`).then(e => e.json())\r\n  },\r\n  getAll() {\r\n    return fetch(`${remoteURL}/ideas`).then(e => e.json())\r\n  },\r\n  getSpecificInfo(incomingstring) {\r\n    return fetch(`${remoteURL}/${incomingstring}`).then(e => e.json())\r\n  },\r\n  post(newIdea) {\r\n    return fetch(`${remoteURL}/ideas`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(newIdea)\r\n    }).then(data => data.json())\r\n  },\r\n  put(putIdea) {\r\n    return fetch(`${remoteURL}/ideas/${putIdea.id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(putIdea)\r\n    }).then(data => data.json())\r\n  },\r\n  delete(deleteIdea) {\r\n    return fetch(`${remoteURL}/ideas/${deleteIdea.id}`, {\r\n      method: \"DELETE\"\r\n    }).then(e => e.json())\r\n  }\r\n}\r\n","const remoteURL = \"http://localhost:1717\"\r\n\r\nexport default {\r\n  get(id) {\r\n    return fetch(`${remoteURL}/activities/${id}`).then(e => e.json())\r\n  },\r\n  getAll() {\r\n    return fetch(`${remoteURL}/activities`).then(e => e.json())\r\n  },\r\n  getSpecificInfo(incomingstring) {\r\n    return fetch(`${remoteURL}/${incomingstring}`).then(e => e.json())\r\n  },\r\n  post(newActivity) {\r\n    return fetch(`${remoteURL}/activities`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(newActivity)\r\n    }).then(data => data.json())\r\n  },\r\n  put(putActivity) {\r\n    return fetch(`${remoteURL}/activities/${putActivity.id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(putActivity)\r\n    }).then(data => data.json())\r\n  },\r\n  delete(deleteActivity) {\r\n    return fetch(`${remoteURL}/activities/${deleteActivity.id}`, {\r\n      method: \"DELETE\"\r\n    }).then(e => e.json())\r\n  }\r\n}\r\n","import React, { Component } from \"react\"\r\nimport \"./MyFavorites.css\"\r\nimport PhotoManager from \"../../modules/PhotoManager\"\r\nimport QuoteManager from \"../../modules/QuoteManager\"\r\nimport IdeaManager from \"../../modules/IdeaManager\"\r\nimport ActivityManager from \"../../modules/ActivityManager\"\r\n\r\nexport default class MyFavorites extends Component {\r\n  currentUserId = parseInt(sessionStorage.getItem(\"id\")) //Get the current userid and convert the string to a number.\r\n\r\n  componentDidMount() {\r\n    this.props.getMyFavoritePhotos()\r\n    this.props.getMyFavoriteQuotes()\r\n    this.props.getMyFavoriteIdeas()\r\n    this.props.getMyFavoriteActivities()\r\n  }\r\n\r\n  onClickPhotoHandler = photoComingIn => {\r\n    const copyPhoto = { ...photoComingIn }\r\n    // Optional way of handling the above statement\r\n    // const copyPhoto1 = {}\r\n    // copyPhoto1.isfavorite = !photoComingIn.isfavorite\r\n    copyPhoto.isfavorite = !copyPhoto.isfavorite //Change the value of isfavorite field\r\n    PhotoManager.put(copyPhoto).then(() => this.props.getMyFavoritePhotos()) //the .then is necessary for re-rendering!\r\n  }\r\n\r\n  onClickQuoteHandler = quoteComingIn => {\r\n    const copyQuote = { ...quoteComingIn }\r\n    copyQuote.isfavorite = !copyQuote.isfavorite //Change the value of isfavorite field\r\n    QuoteManager.put(copyQuote).then(() => this.props.getMyFavoriteQuotes()) //the .then is necessary for re-rendering!\r\n  }\r\n\r\n  onClickIdeaHandler = ideaComingIn => {\r\n    const copyIdea = { ...ideaComingIn }\r\n    copyIdea.isfavorite = !copyIdea.isfavorite //Change the value of isfavorite field\r\n    IdeaManager.put(copyIdea).then(() => this.props.getMyFavoriteIdeas()) //the .then is necessary for re-rendering!\r\n  }\r\n\r\n  onClickActivityHandler = activityComingIn => {\r\n    const copyActivity = { ...activityComingIn }\r\n    copyActivity.isfavorite = !copyActivity.isfavorite //Change the value of isfavorite field\r\n    ActivityManager.put(copyActivity).then(() =>\r\n      this.props.getMyFavoriteActivities()\r\n    ) //the .then is necessary for re-rendering!\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <h2 className=\"headingmyfav\">My Favorites</h2>\r\n        </div>\r\n        <div className=\"allitems-container\">\r\n          {this.props.photos.map(eachphoto => (\r\n            <div key={eachphoto.id} className=\"card border border-primary\">\r\n              <img\r\n                className=\"card-img-top\"\r\n                src={eachphoto.url}\r\n                alt=\"favorite pic\"\r\n              />\r\n              <div className=\"card-body\">\r\n                <a\r\n                  href=\"#\"\r\n                  onClick={() => this.onClickPhotoHandler(eachphoto)}\r\n                  className=\"btn btn-danger\"\r\n                >\r\n                  Remove\r\n                </a>\r\n              </div>\r\n            </div>\r\n          ))}\r\n          {this.props.quotes.map(eachquote => (\r\n            <div key={eachquote.id} className=\"card text-white bg-danger mb-3\">\r\n              <div className=\"card-body\">\r\n                <h5 className=\"card-title\">Quote</h5>\r\n                <p>{eachquote.quote}</p>\r\n                <p>{eachquote.author}</p>\r\n                <a\r\n                  href=\"#\"\r\n                  onClick={() => this.onClickQuoteHandler(eachquote)}\r\n                  className=\"btn btn-warning\"\r\n                >\r\n                  Remove\r\n                </a>\r\n              </div>\r\n            </div>\r\n          ))}\r\n          {this.props.ideas.map(eachidea => (\r\n            <div key={eachidea.id} className=\"card text-white bg-success mb-3\">\r\n              <div className=\"card-body\">\r\n                <h5 className=\"card-title\">Idea</h5>\r\n                <p>{eachidea.idea}</p>\r\n                <a\r\n                  href=\"#\"\r\n                  onClick={() => this.onClickIdeaHandler(eachidea)}\r\n                  className=\"btn btn-danger\"\r\n                >\r\n                  Remove\r\n                </a>\r\n              </div>\r\n            </div>\r\n          ))}\r\n          {this.props.activities.map(eachactivity => (\r\n            <div\r\n              key={eachactivity.id}\r\n              className=\"card text-white bg-primary mb-3\"\r\n            >\r\n              <div className=\"card-body\">\r\n                <h5 className=\"card-title\">Activity</h5>\r\n                <p>{eachactivity.activity_nickname}</p>\r\n                <a\r\n                  href=\"#\"\r\n                  onClick={() => this.onClickActivityHandler(eachactivity)}\r\n                  className=\"btn btn-danger\"\r\n                >\r\n                  Remove\r\n                </a>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import { eventBriteAuthToken } from './keys'\r\n\r\nconst remoteURL = \"https://www.eventbriteapi.com/v3\"\r\n\r\nexport default {\r\n  getEventsByTime(timeperiod) {\r\n    return fetch(`${remoteURL}/events/search/?location.address=nashville&location.within=10mi&start_date.keyword=${timeperiod}&token=${eventBriteAuthToken}`).then(e => e.json())\r\n  }\r\n}","export const eventBriteAuthToken = \"XIDA57II6OQB3SSLJCVW\" //Eventbrite API Token","import React, { Component } from \"react\"\r\nimport { Button, ButtonGroup, CustomInput } from \"reactstrap\"\r\nimport \"./MyPhotos.css\"\r\nimport PhotoManager from \"../../modules/PhotoManager\"\r\n\r\nexport default class MyPhotos extends Component {\r\n  state = {\r\n    value: \"\",\r\n    isfavorite: true,\r\n    radioSelected: true\r\n  }\r\n\r\n  handleOnChangePhotoUrl = event => {\r\n    this.setState({ value: event.target.value })\r\n  }\r\n\r\n  onRadioBtnClick(radioSelected) {\r\n    this.setState({ isfavorite: radioSelected }) //The value of isfavorite corresponds to what is selected by the radio button\r\n  }\r\n\r\n  handleOnClickAddPhotoButton = () => {\r\n    const newPhoto = {\r\n      userid: this.props.currentUserId,\r\n      url: this.state.value,\r\n      isfavorite: this.state.isfavorite //Whatever is selected by the radiobutton is passed.\r\n    }\r\n    PhotoManager.post(newPhoto).then(() => {\r\n      this.setState({ value: \"\" }) //Clears the field of its values\r\n      this.props.getMyPhotos()\r\n    })\r\n  }\r\n\r\n  //Update photos after value of checkbox is changed.\r\n  changeMyFavorite = selectedphoto => {\r\n    console.log(\"selected photo\", selectedphoto)\r\n    const copyPhoto = { ...selectedphoto }\r\n    copyPhoto.isfavorite = !copyPhoto.isfavorite\r\n    PhotoManager.put(copyPhoto).then(() => this.props.getMyPhotos())\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getMyPhotos()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <h2 className=\"headingmypho\">My Photos</h2>\r\n        </div>\r\n        <div className=\"photo-page-container\">\r\n          <div className=\"form-container w-25\">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"addaphoto\">Want to add a photo?</label>\r\n              <textarea\r\n                value={this.state.value}\r\n                className=\"form-control\"\r\n                id=\"addaphoto\"\r\n                rows=\"3\"\r\n                placeholder=\"(Enter image address here...select if you want it in favorites...and then press the Add Photo button)\"\r\n                onChange={this.handleOnChangePhotoUrl}\r\n              />\r\n            </div>\r\n            <div>\r\n              <h5>Favorite?</h5>\r\n              <ButtonGroup className=\"mb-3\">\r\n                <Button\r\n                  color=\"success\"\r\n                  onClick={() => this.onRadioBtnClick(true)}\r\n                  active={this.state.radioSelected === true}\r\n                >\r\n                  Yes\r\n                </Button>\r\n                <Button\r\n                  color=\"danger\"\r\n                  onClick={() => this.onRadioBtnClick(false)}\r\n                  active={this.state.radioSelected === false}\r\n                >\r\n                  No\r\n                </Button>\r\n              </ButtonGroup>\r\n            </div>\r\n            <button\r\n              disabled={!this.state.value}\r\n              className=\"btn btn-primary\"\r\n              onClick={this.handleOnClickAddPhotoButton}\r\n            >\r\n              Add Photo\r\n            </button>\r\n          </div>\r\n          <section className=\"photo-container w-75\">\r\n            {this.props.photos.map(eachphoto => (\r\n              <div key={eachphoto.id} className=\"card border border-primary\">\r\n                <img\r\n                  className=\"card-img-top\"\r\n                  src={eachphoto.url}\r\n                  alt=\"Card cap\"\r\n                />\r\n                <div className=\"card-body\">\r\n                  <div className=\"favorites-on-cardgroup mb-3\">\r\n                    <b className=\"text-danger\">Favorite:</b>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"myfavorite\"\r\n                      checked={eachphoto.isfavorite}\r\n                      onChange={() => this.changeMyFavorite(eachphoto)}\r\n                    />\r\n                  </div>\r\n                  <a\r\n                    href=\"#\"\r\n                    className=\"btn btn-danger\"\r\n                    onClick={() => this.props.deletePhoto(eachphoto)}\r\n                  >\r\n                    Delete\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </section>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\"\r\nimport { Button, ButtonGroup } from \"reactstrap\"\r\nimport \"./MyQuotes.css\"\r\nimport QuoteManager from \"../../modules/QuoteManager\"\r\n\r\nexport default class MyQuotes extends Component {\r\n  state = {\r\n    quote: \"\",\r\n    author: \"\",\r\n    isfavorite: true,\r\n    radioSelected: true\r\n  }\r\n\r\n  handleOnChangeQuote = event => {\r\n    this.setState({ quote: event.target.value })\r\n  }\r\n\r\n  handleOnChangeAuthor = event => {\r\n    this.setState({ author: event.target.value })\r\n  }\r\n\r\n  onRadioBtnClick(radioSelected) {\r\n    this.setState({ isfavorite: radioSelected }) //The value of isfavorite corresponds to what is selected by the radio button\r\n  }\r\n\r\n  handleOnClickAddQuoteButton = () => {\r\n    if (this.state.quote === \"\" || this.state.author === \"\") {\r\n      window.alert(\"Please fill in all fields\")\r\n    } else {\r\n      const newQuote = {\r\n        userid: this.props.currentUserId,\r\n        quote: this.state.quote,\r\n        author: this.state.author,\r\n        isfavorite: this.state.isfavorite\r\n      }\r\n\r\n      QuoteManager.post(newQuote).then(() => {\r\n        this.setState({ quote: \"\" }) //Clears the field of its values\r\n        this.setState({ author: \"\" })\r\n        this.props.getMyQuotes()\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getMyQuotes()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <h2 className=\"headingMyQuo\">My Quotes</h2>\r\n        </div>\r\n        <div className=\"quote-page-container\">\r\n          <div className=\"form-container w-25\">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"addaquote\">Want to add a quote?</label>\r\n              <textarea\r\n                value={this.state.quote}\r\n                className=\"form-control\"\r\n                id=\"addaquote\"\r\n                rows=\"3\"\r\n                placeholder=\"(Enter quote here...select if you want it in favorites...and then press the Add Quote button)\"\r\n                onChange={this.handleOnChangeQuote}\r\n              />\r\n              <label htmlFor=\"addaquote\">Author</label>\r\n              <textarea\r\n                value={this.state.author}\r\n                className=\"form-control\"\r\n                id=\"addaquote\"\r\n                rows=\"3\"\r\n                placeholder=\"(Enter name of author)\"\r\n                onChange={this.handleOnChangeAuthor}\r\n              />\r\n            </div>\r\n            <div>\r\n              <h5>Favorite?</h5>\r\n              <ButtonGroup className=\"mb-3\">\r\n                <Button\r\n                  color=\"success\"\r\n                  onClick={() => this.onRadioBtnClick(true)}\r\n                  active={this.state.radioSelected === true}\r\n                >\r\n                  Yes\r\n                </Button>\r\n                <Button\r\n                  color=\"danger\"\r\n                  onClick={() => this.onRadioBtnClick(false)}\r\n                  active={this.state.radioSelected === false}\r\n                >\r\n                  No\r\n                </Button>\r\n              </ButtonGroup>\r\n            </div>\r\n            <button\r\n              disabled={!this.state.quote}\r\n              className=\"btn btn-primary\"\r\n              onClick={this.handleOnClickAddQuoteButton}\r\n            >\r\n              Add Quote\r\n            </button>\r\n          </div>\r\n          <section className=\"quote-container w-75\">\r\n            {this.props.quotes.map(eachquote => (\r\n              <div\r\n                key={eachquote.id}\r\n                className=\"card text-white bg-danger mb-3\"\r\n              >\r\n                <div className=\"card-body\">\r\n                  <h5 className=\"card-title\">Quote</h5>\r\n                  <p>{eachquote.quote}</p>\r\n                  <p>{eachquote.author}</p>\r\n                  <a\r\n                    href=\"#\"\r\n                    className=\"btn btn-primary mb-2\"\r\n                    onClick={() => {\r\n                      this.props.history.push(`/My_Quotes/${eachquote.id}/edit`)\r\n                    }}\r\n                  >\r\n                    Edit\r\n                  </a>\r\n                  <a\r\n                    href=\"#\"\r\n                    className=\"btn btn-warning\"\r\n                    onClick={() => this.props.deleteQuote(eachquote)}\r\n                  >\r\n                    Delete\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </section>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\"\r\nimport { Button, ButtonGroup } from \"reactstrap\"\r\nimport QuoteManager from \"../../modules/QuoteManager\"\r\nimport \"./QuoteEditForm.css\"\r\nexport default class QuoteEditForm extends Component {\r\n  // Set initial state\r\n  state = {\r\n    quote: \"\",\r\n    author: \"\",\r\n    isfavorite: true,\r\n    radioSelected: true\r\n  }\r\n\r\n  handleOnChangeQuote = event => {\r\n    this.setState({ quote: event.target.value })\r\n  }\r\n\r\n  handleOnChangeAuthor = event => {\r\n    this.setState({ author: event.target.value })\r\n  }\r\n\r\n  onRadioBtnClick(radioSelected) {\r\n    this.setState({ isfavorite: radioSelected })\r\n  }\r\n\r\n  updateExistingQuote = evt => {\r\n    evt.preventDefault()\r\n    if (this.state.quote === \"\" || this.state.author === \"\") {\r\n      window.alert(\"Please fill in all fields\")\r\n    } else {\r\n      const editedQuote = {\r\n        id: parseInt(this.props.match.params.quoteId),\r\n        quote: this.state.quote,\r\n        author: this.state.author,\r\n        isfavorite: this.state.isfavorite,\r\n        userid: this.props.currentUserId\r\n      }\r\n\r\n      this.props\r\n        .updateQuote(editedQuote)\r\n        .then(() => this.props.history.push(\"/My_Quotes\"))\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    QuoteManager.get(this.props.match.params.quoteId).then(quoteToEdit => {\r\n      this.setState({\r\n        quote: quoteToEdit.quote,\r\n        author: quoteToEdit.author\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div>\r\n          <div>\r\n            <h2 className=\"heading\">Edit a Quote</h2>\r\n          </div>\r\n          <div className=\"form-container w-50\">\r\n            <form className=\"quoteForm\">\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"change-quote\">Quote</label>\r\n                <textarea\r\n                  value={this.state.quote}\r\n                  className=\"form-control\"\r\n                  id=\"change-quote\"\r\n                  rows=\"3\"\r\n                  onChange={this.handleOnChangeQuote}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"author\">Author</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  onChange={this.handleOnChangeAuthor}\r\n                  id=\"author\"\r\n                  value={this.state.author}\r\n                />\r\n              </div>\r\n              <div>\r\n                <h5>Favorite?</h5>\r\n                <ButtonGroup className=\"mb-3\">\r\n                  <Button\r\n                    color=\"success\"\r\n                    onClick={() => this.onRadioBtnClick(true)}\r\n                    active={this.state.radioSelected === true}\r\n                  >\r\n                    Yes\r\n                  </Button>\r\n                  <Button\r\n                    color=\"danger\"\r\n                    onClick={() => this.onRadioBtnClick(false)}\r\n                    active={this.state.radioSelected === false}\r\n                  >\r\n                    No\r\n                  </Button>\r\n                </ButtonGroup>\r\n              </div>\r\n              <button\r\n                type=\"submit\"\r\n                onClick={this.updateExistingQuote}\r\n                className=\"btn btn-primary\"\r\n              >\r\n                Submit\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\"\r\nimport { Button, ButtonGroup } from \"reactstrap\"\r\nimport \"./MyIdeas.css\"\r\nimport IdeaManager from \"../../modules/IdeaManager\"\r\n\r\nexport default class MyIdeas extends Component {\r\n  state = {\r\n    idea: \"\",\r\n    isfavorite: true,\r\n    radioSelected: true\r\n  }\r\n\r\n  handleOnChangeIdea = event => {\r\n    this.setState({ idea: event.target.value })\r\n  }\r\n\r\n  onRadioBtnClick(radioSelected) {\r\n    this.setState({ isfavorite: radioSelected }) //The value of isfavorite corresponds to what is selected by the radio button\r\n  }\r\n\r\n  handleOnClickAddIdeaButton = () => {\r\n    if (this.state.idea === \"\") {\r\n      window.alert(\"Please fill in all fields\")\r\n    } else {\r\n      const newIdea = {\r\n        userid: this.props.currentUserId,\r\n        idea: this.state.idea,\r\n        isfavorite: this.state.isfavorite\r\n      }\r\n\r\n      IdeaManager.post(newIdea).then(() => {\r\n        this.setState({ idea: \"\" }) //Clears the field of its values\r\n        this.props.getMyIdeas()\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getMyIdeas()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <h2 className=\"headingMyIdea\">My Ideas</h2>\r\n        </div>\r\n        <div className=\"idea-page-container\">\r\n          <div className=\"form-container w-25\">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"addaidea\">Want to add an idea?</label>\r\n              <textarea\r\n                value={this.state.idea}\r\n                className=\"form-control\"\r\n                id=\"addaidea\"\r\n                rows=\"3\"\r\n                placeholder=\"(Enter idea here...select if you want it in favorites...and then press the Add Idea button)\"\r\n                onChange={this.handleOnChangeIdea}\r\n              />\r\n            </div>\r\n            <div>\r\n              <h5>Favorite?</h5>\r\n              <ButtonGroup className=\"mb-3\">\r\n                <Button\r\n                  color=\"success\"\r\n                  onClick={() => this.onRadioBtnClick(true)}\r\n                  active={this.state.radioSelected === true}\r\n                >\r\n                  Yes\r\n                </Button>\r\n                <Button\r\n                  color=\"danger\"\r\n                  onClick={() => this.onRadioBtnClick(false)}\r\n                  active={this.state.radioSelected === false}\r\n                >\r\n                  No\r\n                </Button>\r\n              </ButtonGroup>\r\n            </div>\r\n            <button\r\n              disabled={!this.state.idea}\r\n              className=\"btn btn-primary\"\r\n              onClick={this.handleOnClickAddIdeaButton}\r\n            >\r\n              Add Idea\r\n            </button>\r\n          </div>\r\n          <section className=\"idea-container w-75\">\r\n            {this.props.ideas.map(eachidea => (\r\n              <div\r\n                key={eachidea.id}\r\n                className=\"card text-white bg-success mb-3\"\r\n              >\r\n                <div className=\"card-body\">\r\n                  <h5 className=\"card-title\">Idea</h5>\r\n                  <p>{eachidea.idea}</p>\r\n                  <a\r\n                    href=\"#\"\r\n                    className=\"btn btn-primary mb-2\"\r\n                    onClick={() => {\r\n                      this.props.history.push(`/My_Ideas/${eachidea.id}/edit`)\r\n                    }}\r\n                  >\r\n                    Edit\r\n                  </a>\r\n                  <a\r\n                    href=\"#\"\r\n                    className=\"btn btn-danger\"\r\n                    onClick={() => this.props.deleteIdea(eachidea)}\r\n                  >\r\n                    Delete\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </section>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\"\r\nimport { Button, ButtonGroup } from \"reactstrap\"\r\nimport IdeaManager from \"../../modules/IdeaManager\"\r\nimport \"./IdeaEditForm.css\"\r\nexport default class IdeaEditForm extends Component {\r\n  // Set initial state\r\n  state = {\r\n    idea: \"\",\r\n    isfavorite: true,\r\n    radioSelected: true\r\n  }\r\n\r\n  currentUserId = parseInt(sessionStorage.getItem(\"id\"))\r\n\r\n  handleOnChangeIdea = event => {\r\n    this.setState({ idea: event.target.value })\r\n  }\r\n\r\n  onRadioBtnClick(radioSelected) {\r\n    this.setState({ isfavorite: radioSelected })\r\n  }\r\n\r\n  updateExistingIdea = evt => {\r\n    evt.preventDefault()\r\n    if (this.state.idea === \"\") {\r\n      window.alert(\"Please fill in all fields\")\r\n    } else {\r\n      const editedIdea = {\r\n        id: parseInt(this.props.match.params.ideaId),\r\n        idea: this.state.idea,\r\n        isfavorite: this.state.isfavorite,\r\n        userid: this.currentUserId\r\n      }\r\n\r\n      this.props\r\n        .updateIdea(editedIdea)\r\n        .then(() => this.props.history.push(\"/My_Ideas\"))\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    IdeaManager.get(this.props.match.params.ideaId).then(ideaToEdit => {\r\n      this.setState({\r\n        idea: ideaToEdit.idea\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div>\r\n          <div>\r\n            <h2 className=\"headingIdeaEdit\">Edit a Idea</h2>\r\n          </div>\r\n          <div className=\"form-container w-50\">\r\n            <form className=\"ideaForm\">\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"change-idea\">Idea</label>\r\n                <textarea\r\n                  value={this.state.idea}\r\n                  className=\"form-control\"\r\n                  id=\"change-idea\"\r\n                  rows=\"3\"\r\n                  onChange={this.handleOnChangeIdea}\r\n                />\r\n              </div>\r\n              <div>\r\n                <h5>Favorite?</h5>\r\n                <ButtonGroup className=\"mb-3\">\r\n                  <Button\r\n                    color=\"success\"\r\n                    onClick={() => this.onRadioBtnClick(true)}\r\n                    active={this.state.radioSelected === true}\r\n                  >\r\n                    Yes\r\n                  </Button>\r\n                  <Button\r\n                    color=\"danger\"\r\n                    onClick={() => this.onRadioBtnClick(false)}\r\n                    active={this.state.radioSelected === false}\r\n                  >\r\n                    No\r\n                  </Button>\r\n                </ButtonGroup>\r\n              </div>\r\n              <button\r\n                type=\"submit\"\r\n                onClick={this.updateExistingIdea}\r\n                className=\"btn btn-primary\"\r\n              >\r\n                Submit\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\"\r\nimport { Button, ButtonGroup } from \"reactstrap\"\r\nimport \"./MyActivities.css\"\r\nimport ActivityManager from \"../../modules/ActivityManager\"\r\n\r\nexport default class MyActivities extends Component {\r\n  state = {\r\n    value: \"\",\r\n    activity_nickname: \"\",\r\n    isfavorite: true,\r\n    radioSelected: true\r\n  }\r\n\r\n  handleOnChangeActivityUrl = event => {\r\n    this.setState({ value: event.target.value })\r\n  }\r\n\r\n  handleOnChangeActivityNickname = event => {\r\n    this.setState({ activity_nickname: event.target.value })\r\n  }\r\n\r\n  onRadioBtnClick(radioSelected) {\r\n    this.setState({ isfavorite: radioSelected }) //The value of isfavorite corresponds to what is selected by the radio button\r\n  }\r\n\r\n  handleOnClickAddActivityButton = () => {\r\n    if (this.state.activity_url === \"\" || this.state.activity_nickname === \"\") {\r\n      window.alert(\"Please fill in all fields\")\r\n    } else {\r\n      const newActivity = {\r\n        userid: this.props.currentUserId,\r\n        activity_nickname: this.state.activity_nickname,\r\n        activity_url: this.state.value,\r\n        isfavorite: this.state.isfavorite //Whatever is selected by the radiobutton is passed.\r\n      }\r\n      ActivityManager.post(newActivity).then(() => {\r\n        this.setState({ value: \"\" })\r\n        this.setState({ activity_nickname: \"\" }) //Clears the field of its values\r\n        this.props.getMyActivities()\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getMyActivities()\r\n    this.setState({ value: this.props.eventurl })\r\n    this.props.onClickResetEventUrl(\"\")\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <h2 className=\"headingmyactivity\">My Activities</h2>\r\n        </div>\r\n        <div className=\"activity-page-container\">\r\n          <div className=\"form-container w-25\">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"addaactivity\" className=\"mr-3\">\r\n                Want to add an activity?\r\n              </label>\r\n              <button\r\n                className=\"btn btn-info\"\r\n                onClick={() => this.props.history.push(`/My_EventbriteList`)}\r\n              >\r\n                Choose from a List\r\n              </button>\r\n              <textarea\r\n                value={this.state.value}\r\n                className=\"form-control\"\r\n                id=\"addaactivity\"\r\n                rows=\"3\"\r\n                placeholder=\"(Click the button above or enter web url here)\"\r\n                onChange={this.handleOnChangeActivityUrl}\r\n              />\r\n              <label htmlFor=\"addanickname\">Short Description/Title</label>\r\n              <textarea\r\n                value={this.state.activity_nickname}\r\n                className=\"form-control\"\r\n                id=\"addanickname\"\r\n                rows=\"3\"\r\n                placeholder=\"(Type a short title/description you can easily remember)\"\r\n                onChange={this.handleOnChangeActivityNickname}\r\n              />\r\n            </div>\r\n            <div>\r\n              <h5>Favorite?</h5>\r\n              <ButtonGroup className=\"mb-3\">\r\n                <Button\r\n                  color=\"success\"\r\n                  onClick={() => this.onRadioBtnClick(true)}\r\n                  active={this.state.radioSelected === true}\r\n                >\r\n                  Yes\r\n                </Button>\r\n                <Button\r\n                  color=\"danger\"\r\n                  onClick={() => this.onRadioBtnClick(false)}\r\n                  active={this.state.radioSelected === false}\r\n                >\r\n                  No\r\n                </Button>\r\n              </ButtonGroup>\r\n            </div>\r\n            <button\r\n              disabled={!this.state.value}\r\n              className=\"btn btn-primary\"\r\n              onClick={this.handleOnClickAddActivityButton}\r\n            >\r\n              Add Activity\r\n            </button>\r\n          </div>\r\n          <section className=\"activity-container w-75\">\r\n            {this.props.activities.map(eachactivity => (\r\n              <div\r\n                key={eachactivity.id}\r\n                className=\"card text-white bg-primary mb-3\"\r\n              >\r\n                <div className=\"card-body\">\r\n                  <h5 className=\"card-title\">Activity</h5>\r\n                  <p>{eachactivity.activity_nickname}</p>\r\n                  <a\r\n                    href=\"#\"\r\n                    className=\"btn btn-warning mb-2\"\r\n                    onClick={() => {\r\n                      this.props.history.push(\r\n                        `/My_Activities/${eachactivity.id}/edit`\r\n                      )\r\n                    }}\r\n                  >\r\n                    Edit\r\n                  </a>\r\n                  <a\r\n                    href=\"#\"\r\n                    className=\"btn btn-danger\"\r\n                    onClick={() => this.props.deleteActivity(eachactivity)}\r\n                  >\r\n                    Delete\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </section>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\"\r\nimport { Button, ButtonGroup } from \"reactstrap\"\r\nimport ActivityManager from \"../../modules/ActivityManager\"\r\nimport \"./ActivityEditForm.css\"\r\nexport default class ActivityEditForm extends Component {\r\n  // Set initial state\r\n  state = {\r\n    activity_nickname: \"\",\r\n    activity_url: \"\",\r\n    isfavorite: true,\r\n    radioSelected: true\r\n  }\r\n\r\n  handleOnChangeActivityNickname = event => {\r\n    this.setState({ activity_nickname: event.target.value })\r\n  }\r\n\r\n  onRadioBtnClick(radioSelected) {\r\n    this.setState({ isfavorite: radioSelected })\r\n  }\r\n\r\n  updateExistingActivity = evt => {\r\n    evt.preventDefault()\r\n    if (this.state.activity_nickname === \"\") {\r\n      window.alert(\"Please fill in the Activity Title/Description field\")\r\n    } else {\r\n      const editedActivity = {\r\n        id: parseInt(this.props.match.params.activityId),\r\n        activity_nickname: this.state.activity_nickname,\r\n        activity_url: this.state.activity_url,\r\n        isfavorite: this.state.isfavorite,\r\n        userid: this.props.currentUserId\r\n      }\r\n\r\n      this.props\r\n        .updateActivity(editedActivity)\r\n        .then(() => this.props.history.push(\"/My_Activities\"))\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    ActivityManager.get(this.props.match.params.activityId).then(\r\n      activityToEdit => {\r\n        console.log(\"activitytoedit\", activityToEdit)\r\n        this.setState({\r\n          activity_url: activityToEdit.activity_url,\r\n          activity_nickname: activityToEdit.activity_nickname\r\n        })\r\n      }\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div>\r\n          <div>\r\n            <h2 className=\"headingActivityEdit\">Edit a Activity</h2>\r\n          </div>\r\n          <div className=\"form-container w-50\">\r\n            <label>Link to the Activity:</label>\r\n            <form className=\"activityForm\">\r\n              <a href={this.state.activity_url} target=\"_blank\">\r\n                {this.state.activity_url}\r\n              </a>\r\n              <p />\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"change-activity\">\r\n                  Activity Title/Short Description\r\n                </label>\r\n                <textarea\r\n                  value={this.state.activity_nickname}\r\n                  className=\"form-control\"\r\n                  id=\"change-activity\"\r\n                  rows=\"3\"\r\n                  onChange={this.handleOnChangeActivityNickname}\r\n                />\r\n              </div>\r\n              <div>\r\n                <h5>Favorite?</h5>\r\n                <ButtonGroup className=\"mb-3\">\r\n                  <Button\r\n                    color=\"success\"\r\n                    onClick={() => this.onRadioBtnClick(true)}\r\n                    active={this.state.radioSelected === true}\r\n                  >\r\n                    Yes\r\n                  </Button>\r\n                  <Button\r\n                    color=\"danger\"\r\n                    onClick={() => this.onRadioBtnClick(false)}\r\n                    active={this.state.radioSelected === false}\r\n                  >\r\n                    No\r\n                  </Button>\r\n                </ButtonGroup>\r\n              </div>\r\n              <button\r\n                type=\"submit\"\r\n                onClick={this.updateExistingActivity}\r\n                className=\"btn btn-primary\"\r\n              >\r\n                Submit\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\"\r\nimport { Button, ButtonGroup } from \"reactstrap\"\r\nimport \"./Eventbriteitems.css\"\r\n\r\nexport default class Eventbriteitems extends Component {\r\n  componentDidMount() {\r\n    this.props.getEventbriteevents()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <h2 className=\"headingmyevents\">List of Events</h2>\r\n        </div>\r\n        <div className=\"events-page-container\">\r\n          <section className=\"events-container\">\r\n            {this.props.events.map(eachevent => (\r\n              <div key={eachevent.id} className=\"card text-white bg-dark mb-3\">\r\n                <div className=\"card-body\">\r\n                  <h5 className=\"card-title\">Event</h5>\r\n                  <p>{eachevent.name.text}</p>\r\n                  <a href={eachevent.url} target=\"_blank\">\r\n                    {eachevent.url}\r\n                  </a>\r\n                  <a\r\n                    href=\"#\"\r\n                    className=\"btn btn-warning mb-2\"\r\n                    onClick={() => {\r\n                      this.props.onClickEventChosen(eachevent.url)\r\n                    }}\r\n                  >\r\n                    Choose This\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </section>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import { Route } from \"react-router-dom\"\r\nimport React, { Component } from \"react\"\r\nimport { withRouter } from \"react-router\"\r\nimport Login from \"./Login\"\r\nimport Logout from \"./Logout\"\r\nimport MyFavorites from \"./myfavorites/MyFavorites\"\r\nimport PhotoManager from \"../modules/PhotoManager\"\r\nimport QuoteManager from \"../modules/QuoteManager\"\r\nimport IdeaManager from \"../modules/IdeaManager\"\r\nimport ActivityManager from \"../modules/ActivityManager\"\r\nimport EventbriteManager from \"../modules/EventbriteManager\"\r\nimport MyPhotos from \"./changephotos/MyPhotos\"\r\nimport MyQuotes from \"./changequotes/MyQuotes\"\r\nimport QuoteEditForm from \"./changequotes/QuoteEditForm\"\r\nimport MyIdeas from \"./changeideas/MyIdeas\"\r\nimport IdeaEditForm from \"./changeideas/IdeaEditForm\"\r\nimport MyActivities from \"./changeactivities/MyActivities\"\r\nimport ActivityEditForm from \"./changeactivities/ActivityEditForm\"\r\nimport EventbriteItems from \"./changeactivities/Eventbriteitems\"\r\n\r\nclass ApplicationViews extends Component {\r\n  state = {\r\n    photos: [],\r\n    quotes: [],\r\n    ideas: [],\r\n    activities: [],\r\n    events: [],\r\n    eventurl: \"\" //Used to set the url of an event when selected\r\n  }\r\n\r\n  currentUserId = parseInt(sessionStorage.getItem(\"id\")) //Get the current userid and convert the string to a number.\r\n\r\n  //Get only my favorite photos\r\n  getMyFavoritePhotos = () => {\r\n    PhotoManager.getSpecificInfo(\r\n      `photos?userid=${this.currentUserId}&isfavorite=true`\r\n    ).then(allPhotos => {\r\n      this.setState({\r\n        photos: allPhotos\r\n      })\r\n    })\r\n  }\r\n\r\n  //Get only my favorite quotes\r\n  getMyFavoriteQuotes = () => {\r\n    QuoteManager.getSpecificInfo(\r\n      `quotes?userid=${this.currentUserId}&isfavorite=true`\r\n    ).then(allQuotes => {\r\n      this.setState({\r\n        quotes: allQuotes\r\n      })\r\n    })\r\n  }\r\n\r\n  //Get only my favorite ideas\r\n  getMyFavoriteIdeas = () => {\r\n    IdeaManager.getSpecificInfo(\r\n      `ideas?userid=${this.currentUserId}&isfavorite=true`\r\n    ).then(allIdeas => {\r\n      this.setState({\r\n        ideas: allIdeas\r\n      })\r\n    })\r\n  }\r\n  //Get only my favorite activities\r\n  getMyFavoriteActivities = () => {\r\n    ActivityManager.getSpecificInfo(\r\n      `activities?userid=${this.currentUserId}&isfavorite=true`\r\n    ).then(allActivities => {\r\n      this.setState({\r\n        activities: allActivities\r\n      })\r\n    })\r\n  }\r\n\r\n  //Get ALL my photos\r\n  getMyPhotos = () => {\r\n    PhotoManager.getSpecificInfo(`photos?userid=${this.currentUserId}`).then(\r\n      allPhotos => {\r\n        this.setState({\r\n          photos: allPhotos\r\n        })\r\n      }\r\n    )\r\n  }\r\n\r\n  //Delete a specific photo\r\n  deletePhoto = photoToDelete => {\r\n    PhotoManager.delete(photoToDelete)\r\n      .then(() =>\r\n        PhotoManager.getSpecificInfo(`photos?userid=${this.currentUserId}`)\r\n      )\r\n      .then(allPhotos => {\r\n        this.setState({\r\n          photos: allPhotos\r\n        })\r\n      })\r\n  }\r\n  //Get ALL my quotes\r\n  getMyQuotes = () => {\r\n    QuoteManager.getSpecificInfo(`quotes?userid=${this.currentUserId}`).then(\r\n      allQuotes => {\r\n        this.setState({\r\n          quotes: allQuotes\r\n        })\r\n      }\r\n    )\r\n  }\r\n\r\n  //Update my quote\r\n  updateQuote = editedQuoteObject => {\r\n    return QuoteManager.put(editedQuoteObject)\r\n      .then(() => QuoteManager.getAll())\r\n      .then(allquotes => {\r\n        this.setState({\r\n          quotes: allquotes\r\n        })\r\n      })\r\n  }\r\n\r\n  //Delete my quote\r\n  deleteQuote = quoteToDelete => {\r\n    QuoteManager.delete(quoteToDelete)\r\n      .then(() =>\r\n        QuoteManager.getSpecificInfo(`quotes?userid=${this.currentUserId}`)\r\n      )\r\n      .then(allQuotes => {\r\n        this.setState({\r\n          quotes: allQuotes\r\n        })\r\n      })\r\n  }\r\n\r\n  //Get ALL my ideas\r\n  getMyIdeas = () => {\r\n    IdeaManager.getSpecificInfo(`ideas?userid=${this.currentUserId}`).then(\r\n      allIdeas => {\r\n        this.setState({\r\n          ideas: allIdeas\r\n        })\r\n      }\r\n    )\r\n  }\r\n\r\n  //Update my idea\r\n  updateIdea = editedIdeaObject => {\r\n    return IdeaManager.put(editedIdeaObject)\r\n      .then(() => IdeaManager.getAll())\r\n      .then(allideas => {\r\n        this.setState({\r\n          ideas: allideas\r\n        })\r\n      })\r\n  }\r\n\r\n  //Delete my idea\r\n  deleteIdea = ideaToDelete => {\r\n    IdeaManager.delete(ideaToDelete)\r\n      .then(() =>\r\n        IdeaManager.getSpecificInfo(`ideas?userid=${this.currentUserId}`)\r\n      )\r\n      .then(allIdeas => {\r\n        this.setState({\r\n          ideas: allIdeas\r\n        })\r\n      })\r\n  }\r\n\r\n  //Get ALL my activities\r\n  getMyActivities = () => {\r\n    ActivityManager.getSpecificInfo(\r\n      `activities?userid=${this.currentUserId}`\r\n    ).then(allActivities => {\r\n      this.setState({\r\n        activities: allActivities\r\n      })\r\n    })\r\n  }\r\n\r\n  //Update my activity\r\n  updateActivity = editedActivityObject => {\r\n    return ActivityManager.put(editedActivityObject)\r\n      .then(() => ActivityManager.getAll())\r\n      .then(allactivities => {\r\n        this.setState({\r\n          activities: allactivities\r\n        })\r\n      })\r\n  }\r\n\r\n  //Delete my activity\r\n  deleteActivity = activityToDelete => {\r\n    ActivityManager.delete(activityToDelete)\r\n      .then(() =>\r\n        ActivityManager.getSpecificInfo(\r\n          `activities?userid=${this.currentUserId}`\r\n        )\r\n      )\r\n      .then(allActivities => {\r\n        this.setState({\r\n          activities: allActivities\r\n        })\r\n      })\r\n  }\r\n\r\n  //Get all events for a specific week in Nashville using Eventbrite.\r\n  getEventbriteevents = () => {\r\n    EventbriteManager.getEventsByTime(\"this_week\").then(allEventsNashville => {\r\n      this.setState({\r\n        events: allEventsNashville.events\r\n      })\r\n      console.log(\"Eventbrite events\", allEventsNashville.events)\r\n    })\r\n  }\r\n\r\n  //Sets the value of eventurl based on the value being passed in.\r\n  onClickEventChosen = theurlcomingin => {\r\n    this.setState({ eventurl: theurlcomingin })\r\n    this.props.history.push(`/My_Activities`)\r\n  }\r\n\r\n  //This resets the value of eventurl in Application Views to its default value.\r\n  onClickResetEventUrl = theurlcomingin => {\r\n    this.setState({ eventurl: theurlcomingin })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Route\r\n          exact\r\n          path=\"/login\"\r\n          render={props => {\r\n            return <Login {...props} />\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/logout\"\r\n          render={props => {\r\n            return <Logout {...props} setAuthState={this.props.setAuthState} />\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/My_Favorites\"\r\n          render={props => {\r\n            //This takes you to my favorites page\r\n            return (\r\n              <MyFavorites\r\n                photos={this.state.photos}\r\n                quotes={this.state.quotes}\r\n                ideas={this.state.ideas}\r\n                activities={this.state.activities}\r\n                getMyFavoritePhotos={this.getMyFavoritePhotos}\r\n                getMyFavoriteQuotes={this.getMyFavoriteQuotes}\r\n                getMyFavoriteIdeas={this.getMyFavoriteIdeas}\r\n                getMyFavoriteActivities={this.getMyFavoriteActivities}\r\n              />\r\n            )\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/My_Photos\"\r\n          render={props => {\r\n            return (\r\n              <MyPhotos\r\n                photos={this.state.photos}\r\n                getMyPhotos={this.getMyPhotos}\r\n                currentUserId={this.currentUserId}\r\n                deletePhoto={this.deletePhoto}\r\n              />\r\n            )\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/My_Quotes\"\r\n          render={props => {\r\n            return (\r\n              <MyQuotes\r\n                {...props}\r\n                quotes={this.state.quotes}\r\n                getMyQuotes={this.getMyQuotes}\r\n                currentUserId={this.currentUserId}\r\n                deleteQuote={this.deleteQuote}\r\n              />\r\n            )\r\n          }}\r\n        />\r\n        <Route\r\n          path=\"/My_Quotes/:quoteId(\\d+)/edit\"\r\n          render={props => {\r\n            return (\r\n              <QuoteEditForm\r\n                {...props}\r\n                currentUserId={this.currentUserId}\r\n                updateQuote={this.updateQuote}\r\n              />\r\n            )\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/My_Ideas\"\r\n          render={props => {\r\n            return (\r\n              <MyIdeas\r\n                {...props}\r\n                ideas={this.state.ideas}\r\n                getMyIdeas={this.getMyIdeas}\r\n                currentUserId={this.currentUserId}\r\n                deleteIdea={this.deleteIdea}\r\n              />\r\n            )\r\n          }}\r\n        />\r\n        <Route\r\n          path=\"/My_Ideas/:ideaId(\\d+)/edit\"\r\n          render={props => {\r\n            return (\r\n              <IdeaEditForm\r\n                {...props}\r\n                currentUserId={this.currentUserId}\r\n                updateIdea={this.updateIdea}\r\n              />\r\n            )\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/My_Activities\"\r\n          render={props => {\r\n            return (\r\n              <MyActivities\r\n                {...props}\r\n                activities={this.state.activities}\r\n                getMyActivities={this.getMyActivities}\r\n                currentUserId={this.currentUserId}\r\n                deleteActivity={this.deleteActivity}\r\n                onClickResetEventUrl={this.onClickResetEventUrl}\r\n                eventurl={this.state.eventurl}\r\n              />\r\n            )\r\n          }}\r\n        />\r\n        <Route\r\n          path=\"/My_Activities/:activityId(\\d+)/edit\"\r\n          render={props => {\r\n            return (\r\n              <ActivityEditForm\r\n                {...props}\r\n                currentUserId={this.currentUserId}\r\n                updateActivity={this.updateActivity}\r\n              />\r\n            )\r\n          }}\r\n        />\r\n        <Route\r\n          path=\"/My_EventbriteList\"\r\n          render={props => {\r\n            return (\r\n              <EventbriteItems\r\n                {...props}\r\n                events={this.state.events}\r\n                currentUserId={this.currentUserId}\r\n                getEventbriteevents={this.getEventbriteevents}\r\n                onClickEventChosen={this.onClickEventChosen}\r\n              />\r\n            )\r\n          }}\r\n        />\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default withRouter(ApplicationViews)\r\n","import React, { Component } from \"react\"\r\nimport NavBar from \"./nav/NavBar\" //Child component\r\nimport ApplicationViews from \"./ApplicationViews\" //Child component\r\nimport Login from \"./Login\"\r\n\r\nexport default class MotivationJoy extends Component {\r\n  //Sets the value of authenticated to whatever is in session storage--A value may not exist!\r\n  state = {\r\n    authenticated: sessionStorage.getItem(\"id\")\r\n  }\r\n\r\n  //This function is being passed to the Login component\r\n  setAuthState = () => {\r\n    //If there is a valid value for id in session storage, then set authenticated to true\r\n    if (sessionStorage.getItem(\"id\")) {\r\n      this.setState({ authenticated: true })\r\n    } else {\r\n      this.setState({ authenticated: false })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    //If there is a valid value in the state, then render the Application Views and NavBar components.  Otherwise return them to Login.\r\n    if (this.state.authenticated) {\r\n      return (\r\n        <React.Fragment>\r\n          <NavBar />\r\n          <ApplicationViews\r\n            isAuthenticated={this.state.authenticated}\r\n            setAuthState={this.setAuthState}\r\n          />\r\n        </React.Fragment>\r\n      )\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          <Login setAuthState={this.setAuthState} />\r\n        </React.Fragment>\r\n      )\r\n    }\r\n  }\r\n}\r\n","import ReactDOM from \"react-dom\"\r\nimport React from 'react'\r\nimport { BrowserRouter as Router } from \"react-router-dom\"\r\nimport MotivationJoy from \"./components/MotivationJoy\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(\r\n  <Router>\r\n      <MotivationJoy />\r\n</Router>,\r\n  document.querySelector(\"#root\"))"],"sourceRoot":""}